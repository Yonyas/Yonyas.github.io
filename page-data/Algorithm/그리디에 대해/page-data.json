{"componentChunkName":"component---src-templates-blog-post-js","path":"/Algorithm/그리디에 대해/","result":{"data":{"site":{"siteMetadata":{"title":"Yonyas 블로그","author":"Jiyon Lee","siteUrl":"https://yonyas.github.io","comment":{"disqusShortName":"","utterances":"Yonyas/blog-comments"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"ce4c3847-9db5-5f7e-930a-bdb33a117dec","excerpt":"“매 선택에서 지금 이 순간 당장 최적인 답을 선택하여 적합한 결과를 도출하자” 동전 거스름돈 문제를 예로 들어보자. 500원, 100원, 50원, 10원이 있을 때 가장 최소한의 동전의 개수로 돈을 거슬러줘야 한다. 1230원이라면 500원 2개, 100원 2개, 10원 3개가 될 것이다. 이게 왜 그리디이냐 하면 1230원 - 500 * 2 = 230원 // 이제 230원인 상황에서 최적의 답을 구한다. 230 - 100 * 2 = 30원 // 이제 30원인 상황에서 최적의 답을 구한다. 3…","html":"<blockquote>\n<p>“매 선택에서 <strong>지금 이 순간 당장 최적인 답</strong>을 선택하여 적합한 결과를 도출하자”</p>\n</blockquote>\n<p>동전 거스름돈 문제를 예로 들어보자.<br>\n500원, 100원, 50원, 10원이 있을 때 가장 최소한의 동전의 개수로 돈을 거슬러줘야 한다. 1230원이라면 500원 2개, 100원 2개, 10원 3개가 될 것이다. 이게 왜 그리디이냐 하면</p>\n<ol>\n<li>1230원 - 500 * 2 = 230원 // 이제 230원인 상황에서 최적의 답을 구한다.</li>\n<li>230 - 100 * 2 = 30원 // 이제 30원인 상황에서 최적의 답을 구한다.</li>\n<li>30 - 10 * 3 = 0원 // 끝</li>\n</ol>\n<p>한번의 선택이 다음 선택과 무관한 것이 특징이다.<br>\n만약 거스름돈 동전이 [500원, 400원, 100원] 이라면 어떨까?<br>\n800원의 거스름돈을 주기 위해서 그리디알고리즘을 사용한다면.<br>\n500원 _ 1개, 100원 _ 3개 = 4개의 동전이 필요하다.<br>\n그러나 이것은 정답이 아니다. 정답은 <code class=\"language-text\">400원 * 2개</code>다.<br>\n그래서 그리디알고리즘을 적용할 때는 부분의 해가 최적의 해가 되는가를 잘 따져봐야 한다.</p>\n<h2 id=\"체육복-문제\" style=\"position:relative;\"><a href=\"#%EC%B2%B4%EC%9C%A1%EB%B3%B5-%EB%AC%B8%EC%A0%9C\" aria-label=\"체육복 문제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>체육복 문제</h2>\n<p><a href=\"https://programmers.co.kr/learn/courses/30/lessons/42862\">프로그래머스 문제</a>\n이 문제는 두단계로 나뉜다.<br>\n우선 lost와 reserve 배열에 중복을 제거한다. 본인이 체육복을 잃어버렸을 경우 다른사람한테 빌려줄 수 없기 때문이다. 그 후에 lost를 돌면서 체육복을 빌릴 수 있는지 없는지 판단한다. 1번 학생이 2번 학생의 체육복을 빌리든 다음 선택과 관련이 없다. 그래서 처음부터 배열을 돌면서 하나씩 생각하면 된다.</p>\n<p>두 배열에서 중복을 제거할 때 filter를 사용하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> lost <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> reserve <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> realLost <span class=\"token operator\">=</span> lost<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span> <span class=\"token operator\">=></span> <span class=\"token operator\">!</span>reserve<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> realReserve <span class=\"token operator\">=</span> reserve<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span> <span class=\"token operator\">=></span> <span class=\"token operator\">!</span>lost<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>그 후에 lost를 훑으면서 reserve에서 받을 수 있는지 없는지 판단한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">realLost<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>realReserve<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>v <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    borrowCnt<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//이 부분은 filter 사용</span>\n    <span class=\"token keyword\">return</span> realReserve<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">r</span> <span class=\"token operator\">=></span> <span class=\"token operator\">!</span>realReserve<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>v <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>realReserve<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>v <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    borrowCnt<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//이 부분은 indexOf를 사용했다.</span>\n    <span class=\"token keyword\">return</span> realReserve<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>realReserve<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>v <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> n <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>realLost<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> borrowCnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a href=\"%5BJavaScript%EC%9D%98%20%EB%B0%B0%EC%97%B4%EC%97%90%EC%84%9C%20%ED%8A%B9%EC%A0%95%20%ED%95%AD%EB%AA%A9%EC%9D%84%20%EC%A0%9C%EA%B1%B0%ED%95%98%EB%8A%94%20%EA%B0%80%EC%9E%A5%20%EB%B9%A0%EB%A5%B8%20%EB%B0%A9%EB%B2%95%5D(https://ichi.pro/ko/javascriptui-baeyeol-eseo-teugjeong-hangmog-eul-jegeohaneun-gajang-ppaleun-bangbeob-11311618998348)\">indexOf와 filter의 속도비교</a><br>\n<strong>결론 : filter를 사용하는게 좋다.</strong></p>","frontmatter":{"title":"그리디(탐욕 알고리즘)에 대해","date":"September 05, 2021"}}},"pageContext":{"slug":"/Algorithm/그리디에 대해/","previous":{"fields":{"slug":"/Thought/2021.8월 회고/"},"frontmatter":{"title":"2021.8월 회고"}},"next":{"fields":{"slug":"/JavaScript/실행컨텍스트/"},"frontmatter":{"title":"실행컨텍스트와 실행스택에 대해"}}}},"staticQueryHashes":[]}