{"componentChunkName":"component---src-templates-blog-post-js","path":"/JavaScript/실행컨텍스트/","result":{"data":{"site":{"siteMetadata":{"title":"Yonyas 블로그","author":"Jiyon Lee","siteUrl":"https://yonyas.github.io","comment":{"disqusShortName":"","utterances":"Yonyas/blog-comments"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"f3458c6b-c9b9-54ac-b0a6-be8c0769c957","excerpt":"실행컨텍스트란? js코드가 평가되고 실행되는 환경이다. 실행 컨텍스트에는 전역실행컨텍스트와 함수실행컨텍스트가 있다. 전역컨텍스트 프로그램당 하나밖에 없다. window 전역객체를 만들고 this를 전역객체와 동일하게 설정한다. 생성 시점은 자바스크립트 엔진이 스크립트를 만날 때이다. var…","html":"<p>실행컨텍스트란? js코드가 평가되고 실행되는 환경이다.</p>\n<p>실행 컨텍스트에는 전역실행컨텍스트와 함수실행컨텍스트가 있다.</p>\n<h3 id=\"전역컨텍스트\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%97%AD%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8\" aria-label=\"전역컨텍스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전역컨텍스트</h3>\n<p>프로그램당 하나밖에 없다. window 전역객체를 만들고 this를 전역객체와 동일하게 설정한다. 생성 시점은 자바스크립트 엔진이 스크립트를 만날 때이다. var 등 선언문을 만나면 저장해둔다.</p>\n<h3 id=\"함수-실행-컨텍스트\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98-%EC%8B%A4%ED%96%89-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8\" aria-label=\"함수 실행 컨텍스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수 실행 컨텍스트</h3>\n<p>함수가 <code class=\"language-text\">실행</code>될 때마다 그 함수의 새 컨텍스트가 생긴다. 선언이 아니다.</p>\n<h3 id=\"실행스택\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%ED%96%89%EC%8A%A4%ED%83%9D\" aria-label=\"실행스택 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실행스택</h3>\n<p>코드 실행하는 동안에 생성된 모든 실행컨텍스트를 저장한다.</p>\n<p>자바스크립트가 실행될 때 전역실행컨텍스트를 생성하고 현재 실행스택에 넣는다. 함수호출을 찾을 때마다 실행스택에 쌓는다. js 엔진은 스택 제일 상위 함수를 실행하고 그 컨텍스트는 스택에서 빠져나온다.</p>\n<h2 id=\"js-엔진에-의해-실행컨텍스트는-어떻게-생성되는가\" style=\"position:relative;\"><a href=\"#js-%EC%97%94%EC%A7%84%EC%97%90-%EC%9D%98%ED%95%B4-%EC%8B%A4%ED%96%89%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%83%9D%EC%84%B1%EB%90%98%EB%8A%94%EA%B0%80\" aria-label=\"js 엔진에 의해 실행컨텍스트는 어떻게 생성되는가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>js 엔진에 의해 실행컨텍스트는 어떻게 생성되는가?</h2>\n<p>실행컨텍스트 생성에는 두 단계가 있다. 1. 생성 단계, 2. 실행 단계<br>\n또한 실행컨텍스트에는 LexicalEnvironment와 VariableEnvironment가 있다.</p>\n<h3 id=\"생성-단계\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EC%84%B1-%EB%8B%A8%EA%B3%84\" aria-label=\"생성 단계 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생성 단계</h3>\n<h4 id=\"1-lexicalenvironment-생성\" style=\"position:relative;\"><a href=\"#1-lexicalenvironment-%EC%83%9D%EC%84%B1\" aria-label=\"1 lexicalenvironment 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. LexicalEnvironment 생성</h4>\n<p><strong>변수 매핑</strong>을 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//위 코드의 LexicalEnvironment는? 아래와 같다.</span>\n\nLexicalEnvironment <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\ta<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n\tb<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>b 함수 참조<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>LexicalEnvironment는 3가지 구성요소가 있다.</strong></p>\n<ol>\n<li>환경 기록 - 변수, 함수 선언을 저장한다.</li>\n<li>외부 환경에 대한 참조 - 외부 LexicalEnvironment에 접근.현재 환경에 변수가 없을 경우 외부에서 찾는다.</li>\n<li>\n<p><code class=\"language-text\">this</code> 바인딩 - 글로벌실행컨텍스트에서는 글로벌 오브젝트에 바인딩 된다.(window일 경우 Window), 함수 실행컨텍스트의 경우 함수가 어떻게 호출되느냐에 따라 다르다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">//this binding 설명</span>\n<span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'yonyas'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">getName</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nperson<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'this'는 person</span>\n\n<span class=\"token keyword\">const</span> getName <span class=\"token operator\">=</span> person<span class=\"token punctuation\">.</span>getName<span class=\"token punctuation\">;</span>\n<span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'this'는 window, strict모드라면 undefined</span></code></pre></div>\n</li>\n</ol>\n<p><strong>LexicalEnvironment의 구조</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\">전역실행컨텍스트 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  LexicalEnvironment<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    환경기록<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>a<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">20</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    외부참고<span class=\"token operator\">:</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>null</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">,\n    this: Window\n  }\n}\n\n함수실행컨텍스트 = </span><span class=\"token punctuation\">{</span>\n  LexicalEnvironment<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    환경기록<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>a<span class=\"token operator\">:</span> <span class=\"token number\">10</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    외부참고<span class=\"token operator\">:</span> 전역 or 외부함수<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">this</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>함수가 선언되는 방식에 따라 다르다<span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"2-variableenvironment-생성\" style=\"position:relative;\"><a href=\"#2-variableenvironment-%EC%83%9D%EC%84%B1\" aria-label=\"2 variableenvironment 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. VariableEnvironment 생성</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  이 또한 LexicalEnvironment인데 차이점은 환경기록에 var을 들고 있다. LexicalEnvironment는 const, let을 들고 있다.</code></pre></div>\n<h3 id=\"실행-단계\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%ED%96%89-%EB%8B%A8%EA%B3%84\" aria-label=\"실행 단계 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실행 단계</h3>\n<p>이 단계에서 할당이 완료되고 최종적으로 실행된다.<br>\n생성단계에서 <code class=\"language-text\">var: a 의</code> 환경기록이 <code class=\"language-text\">{a: undefined}</code> 이고 실행단계에서 <code class=\"language-text\">{a: 10}</code>으로 바뀐다.<br>\n이 때 <code class=\"language-text\">let: a</code> 는 생성단계에서 <code class=\"language-text\">{a: &lt;uninitialized></code>이기 때문에 var와 다르게 호이스팅이 일어나지 않는다.</p>\n<h2 id=\"출처\" style=\"position:relative;\"><a href=\"#%EC%B6%9C%EC%B2%98\" aria-label=\"출처 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>출처</h2>\n<p><a href=\"https://blog.bitsrc.io/understanding-execution-context-and-execution-stack-in-javascript-1c9ea8642dd0\">https://blog.bitsrc.io/understanding-execution-context-and-execution-stack-in-javascript-1c9ea8642dd0</a></p>","frontmatter":{"title":"실행컨텍스트와 실행스택에 대해","date":"September 11, 2021"}}},"pageContext":{"slug":"/JavaScript/실행컨텍스트/","previous":{"fields":{"slug":"/Algorithm/그리디에 대해/"},"frontmatter":{"title":"그리디(탐욕 알고리즘)에 대해"}},"next":{"fields":{"slug":"/JavaScript/promise/"},"frontmatter":{"title":"promise 를 써보자"}}}},"staticQueryHashes":[]}