{"componentChunkName":"component---src-templates-blog-post-js","path":"/TypeScript/[Effective TS] item 15/","result":{"data":{"site":{"siteMetadata":{"title":"Yonyas 블로그","author":"Jiyon Lee","siteUrl":"https://yonyas.github.io","comment":{"disqusShortName":"","utterances":"Yonyas/blog-comments"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"64a30c7b-2a86-5631-8c75-048a5acb13d1","excerpt":"이펙티브 타입스크립트 아이템 15 부분을 읽으면서 정리한 내용입니다. 인덱스 시그니처란? 객체 타입인데 키의 이름을 마땅히 모를 때 유용한 방법. 예시를 보자. 특징 3가지 위에 라는 키의 이름은 위치만 표시하는 용도이다. 원하는 대로 네이밍하면 된다. 키의 타입 : string | number | symbol 의 조합. 보통은 string을 쓴다. 값의 타입 : 어떤 것이든 가능하다. 인덱스 시그니처의 단점…","html":"<blockquote>\n<p>이펙티브 타입스크립트 아이템 15 부분을 읽으면서 정리한 내용입니다.</p>\n</blockquote>\n<h2 id=\"인덱스-시그니처란\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EB%8D%B1%EC%8A%A4-%EC%8B%9C%EA%B7%B8%EB%8B%88%EC%B2%98%EB%9E%80\" aria-label=\"인덱스 시그니처란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인덱스 시그니처란?</h2>\n<p>객체 타입인데 키의 이름을 마땅히 모를 때 유용한 방법.<br>\n예시를 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// [property: string] : string 이 부분이 인덱스 시그니처이다.</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Rocket</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>property<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> rocket<span class=\"token operator\">:</span> Rocket <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'Falcon 9'</span><span class=\"token punctuation\">,</span>\n  variant<span class=\"token operator\">:</span> <span class=\"token string\">'v1.0'</span><span class=\"token punctuation\">,</span>\n  thrust<span class=\"token operator\">:</span> <span class=\"token string\">'4,940 kN'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4 id=\"특징-3가지\" style=\"position:relative;\"><a href=\"#%ED%8A%B9%EC%A7%95-3%EA%B0%80%EC%A7%80\" aria-label=\"특징 3가지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>특징 3가지</h4>\n<ul>\n<li>위에 <code class=\"language-text\">property</code>라는 키의 이름은 위치만 표시하는 용도이다. 원하는 대로 네이밍하면 된다.</li>\n<li>키의 타입 : string | number | symbol 의 조합. 보통은 string을 쓴다.</li>\n<li>값의 타입 : 어떤 것이든 가능하다.</li>\n</ul>\n<h4 id=\"인덱스-시그니처의-단점-4가지\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EB%8D%B1%EC%8A%A4-%EC%8B%9C%EA%B7%B8%EB%8B%88%EC%B2%98%EC%9D%98-%EB%8B%A8%EC%A0%90-4%EA%B0%80%EC%A7%80\" aria-label=\"인덱스 시그니처의 단점 4가지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인덱스 시그니처의 단점 4가지</h4>\n<ul>\n<li>키의 이름이 랜덤이기 때문에 실제 객체의 키의 이름과 달라도 잡을 방법이 없다. variant를 varriant 라고 써도 유효하다.</li>\n<li><code class=\"language-text\">type Rocket = { [property: string] : {} }</code> 로 변경해도 문제가 없다. number 로 바꾸면 에러가 뜬다.</li>\n<li>위 예시에서 <code class=\"language-text\">thrust</code> 만 number 타입을 가지고 싶을 때 구현할 방법이 없다.</li>\n<li>IDE 자동완성기능이 동작되지 않는다. rocket 하고 점 찍으면 name, variant, thrust 가 뜨지 않는다.</li>\n</ul>\n<h4 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h4>\n<ul>\n<li>인덱스 시그니처는 부정확하므로 특정한 경우에만 사용하자.</li>\n<li>특정한 경우란? 동적 데이터를 표현할 때. 키의 이름을 모를 때.</li>\n</ul>\n<h3 id=\"특정한-경우를-살펴보자\" style=\"position:relative;\"><a href=\"#%ED%8A%B9%EC%A0%95%ED%95%9C-%EA%B2%BD%EC%9A%B0%EB%A5%BC-%EC%82%B4%ED%8E%B4%EB%B3%B4%EC%9E%90\" aria-label=\"특정한 경우를 살펴보자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>특정한 경우를 살펴보자</h3>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">parseCSV</span><span class=\"token punctuation\">(</span>input<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>columnName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> lines <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>header<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rows<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> lines<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> rows<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>rowStr <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> row<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>columnName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    rowStr<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>cell<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      row<span class=\"token punctuation\">[</span>header<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cell<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> row<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>\n<p>우선 위 코드를 파악해보자</p>\n<ul>\n<li>input으로 ‘가 (엔터) 나 (엔터) 다 (엔터) 라 (엔터)’ 를 넣어보면 다음과 같은 배열이 리턴된다.</li>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> 가<span class=\"token operator\">:</span> <span class=\"token string\">'나'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> 가<span class=\"token operator\">:</span> <span class=\"token string\">'다'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> 가<span class=\"token operator\">:</span> <span class=\"token string\">'라'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>만약 열 이름을 알고 있는 특정한 상황이라면 단언문 as를 사용해준다.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">ProductRow</span> <span class=\"token punctuation\">{</span>\n  productId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  price<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">let</span> csvData<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> products <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token function\">parseCSV</span><span class=\"token punctuation\">(</span>csvData<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> ProductRow<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// as unknown !!</span></code></pre></div>\n<p>as unknown 이 없으면 알아서 사용하라고 에러가 떠주기 때문에 외울 필요는 없다.</p>\n<p><code class=\"language-text\">[columnName: string]: string</code> 과 <code class=\"language-text\">ProductRow[]</code>  두 형식이 충분히 겹치지 않는다고 보는 것이기 때문에 as가 필요하다.</p>\n<p><strong>키의 이름이 제한되었다면 인덱스 시그니처를 쓰지 말자.</strong></p>\n<p>아래와 같이 키의 이름이 a, b, c, d 중 하나일때는 이렇게 쓰는게 좋다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Row2</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  b<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  c<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  d<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>키의 이름이 제한되었지만 너무 많을 경우는 두가지 대안이 있다.</strong></p>\n<ol>\n<li>Record 를 사용하자</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Vec3D</span> <span class=\"token operator\">=</span> Record<span class=\"token operator\">&lt;</span><span class=\"token string\">'x'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'y'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'z'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Type Vec3D = {</span>\n<span class=\"token comment\">//  x: number;</span>\n<span class=\"token comment\">//  y: number;</span>\n<span class=\"token comment\">//  z: number;</span>\n<span class=\"token comment\">// }</span></code></pre></div>\n<ol start=\"2\">\n<li>매핑된 타입을 사용하자.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Vec3D</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>k <span class=\"token keyword\">in</span> <span class=\"token string\">'x'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'y'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'z'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 위의 record 예제와 같다.</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">ABC</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>k <span class=\"token keyword\">in</span> <span class=\"token string\">'a'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'b'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> k <span class=\"token keyword\">extends</span> <span class=\"token string\">'b'</span> <span class=\"token operator\">?</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Type ABC = {</span>\n<span class=\"token comment\">//  a: number;</span>\n<span class=\"token comment\">//  b: string;</span>\n<span class=\"token comment\">//  c: number;</span>\n<span class=\"token comment\">// }</span></code></pre></div>\n<p>위에 ABC 타입을 보면 매핑된 타입을 사용하면 키마다 별도의 타입을 사용하는 것도 가능해진다 !</p>","frontmatter":{"title":"[Book] 이펙티브 타입스크립트 : 동적 데이터에 인덱스 시그니처 사용하기","date":"April 29, 2022"}}},"pageContext":{"slug":"/TypeScript/[Effective TS] item 15/","previous":{"fields":{"slug":"/TypeScript/[Effective TS] item 14/"},"frontmatter":{"title":"[Book] 이펙티브 타입스크립트 : 타입 연산과 제네릭 사용으로 반복 줄이기"}},"next":{"fields":{"slug":"/TypeScript/[Effective TS] item 18/"},"frontmatter":{"title":"[Book] 이펙티브 타입스크립트 : 매핑된 타입을 사용하여 값을 동기화하기"}}}},"staticQueryHashes":[]}