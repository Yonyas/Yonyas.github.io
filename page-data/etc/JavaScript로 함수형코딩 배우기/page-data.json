{"componentChunkName":"component---src-templates-blog-post-js","path":"/etc/JavaScript로 함수형코딩 배우기/","result":{"data":{"site":{"siteMetadata":{"title":"Yonyas 블로그","author":"Jiyon Lee","siteUrl":"https://yonyas.github.io","comment":{"disqusShortName":"","utterances":"Yonyas/blog-comments"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"b52cc932-4f29-5147-ac18-0bbdba04637f","excerpt":"인프런에 함수형 프로그래밍 응용편(유인동님) 강의를 듣고 있다. 이 강의만으로 함수형 프로그래밍은 무엇인가에 대한 이해는 사실 잘 되지 않아서 다른 자료를 읽어봤는데, 이 글은 그 중 설명이 좋았던 Anjana Vakil…","html":"<p>인프런에 함수형 프로그래밍 응용편(유인동님) 강의를 듣고 있다.</p>\n<p>이 강의만으로 함수형 프로그래밍은 무엇인가에 대한 이해는 사실 잘 되지 않아서 다른 자료를 읽어봤는데, 이 글은 그 중 설명이 좋았던 Anjana Vakil 의 강의 내용이다.</p>\n<h3 id=\"함수형-프로그래밍의-특징은-무엇일까\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%98-%ED%8A%B9%EC%A7%95%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%BC%EA%B9%8C\" aria-label=\"함수형 프로그래밍의 특징은 무엇일까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수형 프로그래밍의 특징은 무엇일까</h3>\n<p>우선 명령형 프로그래밍은 레시피대로 요리하면서 변화하는 느낌이다. 처음에 이걸 하고 그 다음에 이걸 하고 …\n객체지향형 프로그래밍은 실제 사물을 본 딴 어떤 모델이 있고 그것들이 서로 상호작용할 때 유용하다.\n함수형 프로그래밍은 모든 것이 함수로 이루어진다.</p>\n<h3 id=\"명령형과-함수형-코드를-살펴보자\" style=\"position:relative;\"><a href=\"#%EB%AA%85%EB%A0%B9%ED%98%95%EA%B3%BC-%ED%95%A8%EC%88%98%ED%98%95-%EC%BD%94%EB%93%9C%EB%A5%BC-%EC%82%B4%ED%8E%B4%EB%B3%B4%EC%9E%90\" aria-label=\"명령형과 함수형 코드를 살펴보자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>명령형과 함수형 코드를 살펴보자</h3>\n<h4 id=\"imperative\" style=\"position:relative;\"><a href=\"#imperative\" aria-label=\"imperative permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>imperative </h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const name = 'Yonyas';\nconst greeting = \"Hi, I'm \";\n\nconsole.log(greeting + name); // \"Hi, I'm Yonyas\"</code></pre></div>\n<h4 id=\"functional\" style=\"position:relative;\"><a href=\"#functional\" aria-label=\"functional permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>functional</h4>\n<p>간단한 코드지만 함수를 사용해서 재사용성이 높아졌다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function greet(name) {\n  return \"Hi, I'm \" + name;\n}\n\ngreet(\"Yonyas\");</code></pre></div>\n<h3 id=\"함수에-side-effect가-없어야-한다\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98%EC%97%90-side-effect%EA%B0%80-%EC%97%86%EC%96%B4%EC%95%BC-%ED%95%9C%EB%8B%A4\" aria-label=\"함수에 side effect가 없어야 한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수에 side effect가 없어야 한다.</h3>\n<p>side effect는 다음을 의미한다.</p>\n<ul>\n<li>함수 내에 console.log같은 state를 변경하고 return하는 것 외에 다른 output이 없다.</li>\n<li>전역변수에 의존하지 않는다. 즉 전역변수를 바꾸거나 아예 사용하지 않고, input으로 들어온 값만 처리한다.</li>\n<li>같은 input 에 같은 output이 나와야 한다.</li>\n</ul>\n<h3 id=\"hofhigher-order-function-를code-classlanguage-text자주code사용한다\" style=\"position:relative;\"><a href=\"#hofhigher-order-function-%EB%A5%BCcode-classlanguage-text%EC%9E%90%EC%A3%BCcode%EC%82%AC%EC%9A%A9%ED%95%9C%EB%8B%A4\" aria-label=\"hofhigher order function 를code classlanguage text자주code사용한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>hof(higher order function) 를 <code class=\"language-text\">자주</code>  사용한다.</h3>\n<p>함수가 인자로 쓰이거나 함수의 return 값이 함수인 경우이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function makeAdjective(adjective) {\n  return function (string) {\n    return adjective + '' + string;\n  }\n}\n\nconst coolifier = makeAdjective('cool')\ncoolifier('conference') // cool conference</code></pre></div>\n<h3 id=\"dont-iterate-dont-mutate-for문-대신-map-reduce-filter-를-사용한다\" style=\"position:relative;\"><a href=\"#dont-iterate-dont-mutate-for%EB%AC%B8-%EB%8C%80%EC%8B%A0-map-reduce-filter-%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C%EB%8B%A4\" aria-label=\"dont iterate dont mutate for문 대신 map reduce filter 를 사용한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Don’t iterate, Don’t mutate (for문 대신 map, reduce, filter 를 사용한다)</h3>\n<ul>\n<li>map으로 새 배열을 만들어 사용한다. 원래 배열은 건들지 않는다.</li>\n<li>push 같이 mutable 한 메서드를 쓰지 않는다.(위와 같은 말이지만.. )</li>\n<li>데이터가 변해버리면 어느 지점에서 바뀌었는지 알기 어렵고 디버깅이 힘들어진다.</li>\n</ul>\n<h3 id=\"persistentimmutable-data-structure-for-efficient-immutability\" style=\"position:relative;\"><a href=\"#persistentimmutable-data-structure-for-efficient-immutability\" aria-label=\"persistentimmutable data structure for efficient immutability permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Persistent(Immutable) data structure for efficient immutability</h3>\n<ul>\n<li>Don’t mutate 를 지키기 위해 매번 배열을 복사해서 사용하는 것은 굉장히 비효율적이다. 배열의 일부분이 바뀌었는데 전체를 복사해야 한다.</li>\n<li>이를 해결하기 위한 좋은 라이브러리들이 많이 있다.(mori, immutable.js, ramda.js, underscore.js …)</li>\n<li>새 배열을 만드는 대신 바뀐 인덱스를 갈아끼우는 식으로 작동한다.</li>\n</ul>\n<h2 id=\"내-생각\" style=\"position:relative;\"><a href=\"#%EB%82%B4-%EC%83%9D%EA%B0%81\" aria-label=\"내 생각 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>내 생각</h2>\n<p>프론트엔드에서는 처음에 말했던 객체지향의 특징(실제 사물을 본 딴 모델의 상호작용)이 적고, 데이터의 변화에 대한 추적의 용이성 때문에 객체지향형보다 함수형이 더 적합하다고 본다.</p>\n<h3 id=\"추천-아티클\" style=\"position:relative;\"><a href=\"#%EC%B6%94%EC%B2%9C-%EC%95%84%ED%8B%B0%ED%81%B4\" aria-label=\"추천 아티클 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>추천 아티클</h3>\n<ul>\n<li><a href=\"https://codewords.recurse.com/issues/one/an-introduction-to-functional-programming\">introduction to functional progmramming by mary rose cook</a></li>\n</ul>\n<h3 id=\"출처\" style=\"position:relative;\"><a href=\"#%EC%B6%9C%EC%B2%98\" aria-label=\"출처 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>출처</h3>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=e-5obm1G_FY\">https://www.youtube.com/watch?v=e-5obm1G_FY</a></li>\n</ul>","frontmatter":{"title":"JavaScript로 함수형코딩 배우기 by Anjana Vakil","date":"September 06, 2022"}}},"pageContext":{"slug":"/etc/JavaScript로 함수형코딩 배우기/","previous":{"fields":{"slug":"/잡담/[잡담] 온라인 모각코/"},"frontmatter":{"title":"[잡담] 온라인 모각코"}},"next":null}},"staticQueryHashes":["2486386679","3128451518"]}