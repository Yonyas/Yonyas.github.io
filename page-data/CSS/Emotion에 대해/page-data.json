{"componentChunkName":"component---src-templates-blog-post-js","path":"/CSS/Emotion에 대해/","result":{"data":{"site":{"siteMetadata":{"title":"Yonyas 블로그","author":"Jiyon Lee","siteUrl":"https://yonyas.github.io","comment":{"disqusShortName":"","utterances":"Yonyas/blog-comments"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"b3fb9d17-7528-59e8-860b-877d0e1e243c","excerpt":"CSS-in-JS 로는 SCSS, Styled-Components 를 써봤다. SCSS의 네스팅기능과 Styled-Components의 props를 내려받아서 활용하는 기능이 좋았다. 그러나 Styled-Components의 태그를 대신하는 스타일명은 컴포넌트와 헷갈렸다. 그리고 컴포넌트명이 대문자로 가득찬 코드가 이뻐보이지 않았다. emotion이 CSS-in-JS에서…","html":"<p>CSS-in-JS 로는 SCSS, Styled-Components 를 써봤다. SCSS의 네스팅기능과 Styled-Components의 props를 내려받아서 활용하는 기능이 좋았다. 그러나 Styled-Components의 태그를 대신하는 스타일명은 컴포넌트와 헷갈렸다. 그리고 컴포넌트명이 대문자로 가득찬 코드가 이뻐보이지 않았다.</p>\n<p>emotion이 CSS-in-JS에서 1위를 달리고 있고 많은 기업에서 사용중이다. 어떤 특징이 있고 왜 좋은지 알아보고 싶어서 사용해보려고 한다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/60434382/130193564-e80405bf-9249-4ed5-8264-31e71410c985.png\" alt=\"다운로드\">\n<a href=\"https://www.npmtrends.com/@emotion/core-vs-styled-components\">npmtrends.com</a></p>\n<p><del>개발자들도 연말연초는 쉬는 것 같다..!</del></p>\n<p>emotion 공식문서가 잘 나와있다. 그런데 코드보기가 영 불편하다.<br>\naside부분이 너무 커서 가로가 자꾸 잘려서 스크롤을 해야 한다. 쩝.</p>\n<h2 id=\"react에서-emotion-사용하는-두가지-방법\" style=\"position:relative;\"><a href=\"#react%EC%97%90%EC%84%9C-emotion-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EB%91%90%EA%B0%80%EC%A7%80-%EB%B0%A9%EB%B2%95\" aria-label=\"react에서 emotion 사용하는 두가지 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React에서 emotion 사용하는 두가지 방법</h2>\n<ul>\n<li>CSS prop</li>\n<li>styled</li>\n</ul>\n<h3 id=\"첫번째-방법-css-props\" style=\"position:relative;\"><a href=\"#%EC%B2%AB%EB%B2%88%EC%A7%B8-%EB%B0%A9%EB%B2%95-css-props\" aria-label=\"첫번째 방법 css props permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>첫번째 방법. CSS props</h3>\n<p>이 방법을 보고 옳다구나 싶었다. 왜냐하면 div, p 등 태그이름을 유지할 수 있기 때문이다. 하지만 결론적으로 이 방법은 props를 받아서 사용하려면 인라인으로 해야하기 때문에 쓰지 않기로 했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/** @jsx jsx */</span>   <span class=\"token comment\">// &lt;-- JSX Pragma 밑에 설명</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> css<span class=\"token punctuation\">,</span> jsx <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@emotion/react'</span>\n\n<span class=\"token keyword\">const</span> color <span class=\"token operator\">=</span> <span class=\"token string\">'white'</span>\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n<span class=\"token comment\">//방법 1.</span>\n  <span class=\"token operator\">&lt;</span>div             <span class=\"token comment\">// div 유지 가능!!!</span>\n    css<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>css<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n      padding: 32px;\n      &amp;:hover {\n        color: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>color<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">;\n      }\n    </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">></span>\n\n<span class=\"token comment\">//방법 2.</span>\n  <span class=\"token operator\">&lt;</span>div\n    css<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n      backgroundColor<span class=\"token operator\">:</span> <span class=\"token string\">'hotpink'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'&amp;:hover'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        color<span class=\"token operator\">:</span> <span class=\"token string\">'lightgreen'</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">></span>\n\n    Hover to change color<span class=\"token punctuation\">.</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<h4 id=\"jsx-pragma\" style=\"position:relative;\"><a href=\"#jsx-pragma\" aria-label=\"jsx pragma permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JSX Pragma</h4>\n<p>CSS props 방법을 사용하려면 <code class=\"language-text\">/** @jsx jsx */</code> 를 위에 붙여야 한다. 바벨을 직접 구성할 수 없을 때 이렇게 해주면 좋다. 예를 들면 CRA나 codesandbox를 사용할 경우이다. 위 코드는 jsx babel plugin이 React.createElement 대신 jsx을 사용할 수 있도록 설정한다. 음.</p>\n<blockquote>\n<p>Similar to a comment containing linter configuration, this configures the <a href=\"https://babeljs.io/docs/en/babel-plugin-transform-react-jsx\">jsx babel plugin</a> to use the jsx function instead of React.createElement.\nCRA 4 이상이면 <code class=\"language-text\">/** @jsxImportSource @emotion/react */</code>를 사용하자.\n<em>-공식문서-</em></p>\n</blockquote>\n<p><strong>*React.createElement 란?</strong></p>\n<p>공식문서의 JSX Pragma를 이해하려면 이 부분을 이해해야 할 것 같다.\nReact에서 바벨적용 전 코드는 어떻게 되어있을까?\n바벨은 내가 열심히 짠 리액트 코드를 아래와 같은 코드로 바꾸어준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span>\n <span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"root\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n <span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">LikeButton</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  \t\t<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"button\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Like\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 참고로 null 부분은 onClick같은 함수자리다.</span>\n <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n <span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>\n ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>LikeButton<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span>\n\n<span class=\"token comment\">// 위 코드결과</span>\n<span class=\"token comment\">// &lt;div id='root'>&lt;button>Like&lt;/button>&lt;/div></span></code></pre></div>\n<p>어떻게 바꿀까?\n바벨은 jsx문법을 지원하는 것이다. jsx란 html+xml이다.\n<code class=\"language-text\">&lt;div></code>는 소문자니까 html로 <code class=\"language-text\">&lt;LikeButton></code>은 대문자니까 xml로 변환한다.</p>\n<p>이실직고 하자면 ‘React.createElement 대신 jsx을 사용할 수 있도록 설정한다’는 공식문서의 설명을 잘 모르겠다… 내 생각으로는</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"> <span class=\"token operator\">&lt;</span>div\n    css<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>css<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n      padding: 32px;\n      &amp;:hover {\n        color: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>color<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">;\n      }\n    </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">></span></code></pre></div>\n<p>위의 코드에서 css 프로퍼티의 값이 소문자인데 이걸 React.createElement로 받아들이면 태그 안에 태그니까 당연히 에러가 난다. 그래서 에러가 뜨지 않도록 어떻게저떻게 하는 것 같다…</p>\n<h3 id=\"두번째-방법-styled-components\" style=\"position:relative;\"><a href=\"#%EB%91%90%EB%B2%88%EC%A7%B8-%EB%B0%A9%EB%B2%95-styled-components\" aria-label=\"두번째 방법 styled components permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>두번째 방법. styled Components</h3>\n<blockquote>\n<p>styled was heavily inspired by <a href=\"https://www.styled-components.com/\">styled-components</a> and <a href=\"https://glamorous.rocks/\">glamorous</a></p>\n</blockquote>\n<p>styled-components의 엄청난 영향을 받아서 그런지 정말 똑같다. 그런데 이렇게 막 갖다베껴도 되는건가. 뭐 저작권을 잘 지켜서 잘 하셨겠지만..</p>\n<h4 id=\"1-props-사용법\" style=\"position:relative;\"><a href=\"#1-props-%EC%82%AC%EC%9A%A9%EB%B2%95\" aria-label=\"1 props 사용법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. props 사용법</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> styled <span class=\"token keyword\">from</span> <span class=\"token string\">'@emotion/styled'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> Button <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>button<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  color: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>primary <span class=\"token operator\">?</span> <span class=\"token string\">'hotpink'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'turquoise'</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">;\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> Container <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span><span class=\"token function\">div</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  display<span class=\"token operator\">:</span> <span class=\"token string\">'flex'</span><span class=\"token punctuation\">,</span>\n  flexDirection<span class=\"token operator\">:</span> props<span class=\"token punctuation\">.</span>column <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">'column'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>Container column<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Button<span class=\"token operator\">></span>This is a regular button<span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Button primary<span class=\"token operator\">></span>This is a primary button<span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Button<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Container<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4 id=\"2-다른-emotion-component-사용하기\" style=\"position:relative;\"><a href=\"#2-%EB%8B%A4%EB%A5%B8-emotion-component-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"2 다른 emotion component 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 다른 emotion component 사용하기</h4>\n<p>백틱사용법과 객체사용법 두가지가 있다. 나는 백틱으로 통일해서 사용할 것!</p>\n<p><strong>백틱 사용법</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> styled <span class=\"token keyword\">from</span> <span class=\"token string\">'@emotion/styled'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> Child <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>div<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  color: red;\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> Parent <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>div<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Child<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> // 이렇게 !! {\n    color: green;\n  }\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Parent<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Child<span class=\"token operator\">></span>Green because <span class=\"token constant\">I</span> am inside a Parent<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Child<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Parent<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Child<span class=\"token operator\">></span>Red because <span class=\"token constant\">I</span> am not inside a Parent<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Child<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>객체사용법</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> styled <span class=\"token keyword\">from</span> <span class=\"token string\">'@emotion/styled'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> Child <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span><span class=\"token function\">div</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">{</span>\n    color<span class=\"token operator\">:</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> fontSize<span class=\"token operator\">:</span> props<span class=\"token punctuation\">.</span>size <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> Parent <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span><span class=\"token function\">div</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>Child<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    color<span class=\"token operator\">:</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Parent<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Child<span class=\"token operator\">></span>green<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Child<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Parent<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Child<span class=\"token operator\">></span>red<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Child<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 사용법을 쓰려면 바벨설정을 해야 한다.\n<a href=\"https://emotion.sh/docs/@emotion/babel-plugin\">공식문서</a>를 보면 설정방법에 babelrc 건들기와 CLI 통해서 하기, node api 통해서 하기 세가지 방법이 나와있다. 일단 노드는 안쓰니까 탈락. 두번째 CLI는 어떻게 하는지 모르겠다. 찾아봐도 모르겠어서 패스.</p>\n<p>그래서 하나 남은 방법. babelrc를 건드려야 한다. 그런데 나는 CRA로 앱을 만들어서 babel을 건들려면 eject를 해야 한다. 찾아보니까 eject를 하지 않고 바벨설정을 하는 방법이 있었다 ! 바로 craco 패키지.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install @craco/craco</code></pre></div>\n<p>설치를 해준다.</p>\n<p><code class=\"language-text\">package.json</code>에서 다음으로 수정한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\"scripts\": {\n    \"start\": \"craco start\",\n    \"build\": \"craco build\",\n    \"test\": \"craco test\",\n    \"eject\": \"craco eject\"\n}</code></pre></div>\n<p>루트폴더에 <code class=\"language-text\">craco.config.js</code>를 추가하고 아래 내용을 넣는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">module.exports = {\n  babel: {\n    plugins: ['@emotion'],\n  },\n};</code></pre></div>\n<p>성공!!!!!\n공식문서 보고 응용(?)해서 뭔가 성공한게 처음이라 기분이 좋다.</p>\n<p>그런데 찾는 도중에 아까 위에서 jsx Pragma를 항상 import해줘야 한다고 썼는데 이것도 바벨설정으로 생략할 수 있다고 한다.\n방금 만든 craco.config.js 파일에</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  babel<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    presets<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'@emotion/babel-preset-css-prop'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>를 추가하면 된다.</p>\n<h4 id=\"3-그외\" style=\"position:relative;\"><a href=\"#3-%EA%B7%B8%EC%99%B8\" aria-label=\"3 그외 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 그외</h4>\n<p>다른 스타일 사용하기</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> styled <span class=\"token keyword\">from</span> <span class=\"token string\">'@emotion/styled'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> Button <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>button<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  color: red;\n  fontsize: 15px;\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> BlueBtn <span class=\"token operator\">=</span> <span class=\"token function\">styled</span><span class=\"token punctuation\">(</span>Button<span class=\"token punctuation\">)</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  color: blue;\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>BlueBtn<span class=\"token operator\">></span>btn<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>BlueBtn<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Global styles랑 theme 지정은 styled-component랑 비슷해서 생략.</p>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<p><a href=\"https://emotion.sh/docs/introduction\">Emotion 공식문서</a></p>\n<p><a href=\"https://www.youtube.com/watch?v=65vwVno1YxQ&#x26;list=PLcqDmjxt30RtqbStQqk-eYMK8N-1SYIFn&#x26;index=3\">제로초님 유튜브 - 바벨 부분</a></p>","frontmatter":{"title":"Emotion with React CRA","date":"August 20, 2021"}}},"pageContext":{"slug":"/CSS/Emotion에 대해/","previous":{"fields":{"slug":"/JavaScript/6. 중첩된 배열의 stringify 구현/"},"frontmatter":{"title":"중첩된 배열의 stringify 직접 구현"}},"next":null}},"staticQueryHashes":["2486386679","3128451518"]}