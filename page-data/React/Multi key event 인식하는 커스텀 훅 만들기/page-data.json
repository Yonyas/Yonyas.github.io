{"componentChunkName":"component---src-templates-blog-post-js","path":"/React/Multi key event 인식하는 커스텀 훅 만들기/","result":{"data":{"site":{"siteMetadata":{"title":"Yonyas 블로그","author":"Jiyon Lee","siteUrl":"https://yonyas.github.io","comment":{"disqusShortName":"","utterances":"Yonyas/blog-comments"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"7143ab49-ca26-5403-aa85-34034b84be87","excerpt":",  같은 조합키가 눌렸을 때 함수를 실행하려면 어떻게 해야 할까. 스택오버플로우에 보면 다음과 같이 나와 있다. 참고로 맥에서는  가   이다.\n위 코드에서 alert 부분 대신 함수를 호출해주면 될 것 같다. 그럼 훅으로 만들어보자. 문제는 이렇게 하면 다른 모든 조합키 및 input에서 text 입력이 동작이 안 된다. 해결하려면 원하는 element에서만 동작하도록 하려면 props로 element 를 받아야 한다. 그리고 preventDefault…","html":"<p><code class=\"language-text\">command + A</code>, <code class=\"language-text\">alt + S</code> 같은 조합키가 눌렸을 때 함수를 실행하려면 어떻게 해야 할까.</p>\n<p>스택오버플로우에 보면 다음과 같이 나와 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">document<span class=\"token punctuation\">.</span>onkeydown <span class=\"token operator\">=</span> keydown<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">keydown</span><span class=\"token punctuation\">(</span>evt<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>evt<span class=\"token punctuation\">)</span> evt <span class=\"token operator\">=</span> event<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>evt<span class=\"token punctuation\">.</span>ctrlKey <span class=\"token operator\">&amp;&amp;</span> evt<span class=\"token punctuation\">.</span>altKey <span class=\"token operator\">&amp;&amp;</span> evt<span class=\"token punctuation\">.</span>keyCode <span class=\"token operator\">===</span> <span class=\"token number\">115</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'CTRL+ALT+F4'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>evt<span class=\"token punctuation\">.</span>shiftKey <span class=\"token operator\">&amp;&amp;</span> evt<span class=\"token punctuation\">.</span>keyCode <span class=\"token operator\">===</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Shift+TAB'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>참고로 맥에서는 <code class=\"language-text\">command</code> 가 <code class=\"language-text\">event.metaKey</code>  이다.\n위 코드에서 alert 부분 대신 함수를 호출해주면 될 것 같다.</p>\n<p>그럼 훅으로 만들어보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">useOnMultiKeyDown</span><span class=\"token punctuation\">(</span>\n combineKey<span class=\"token operator\">:</span> <span class=\"token string\">'commandOrCtrl'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'alt'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'shift'</span><span class=\"token punctuation\">,</span>\n keyCode<span class=\"token operator\">:</span> KeyboardEvent<span class=\"token punctuation\">[</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n onKeyDown<span class=\"token operator\">:</span> VoidFunction<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleKeyDown</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> KeyboardEvent<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 기본 동작인 텍스트 전체 클릭을 막아준다.</span>\n      e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>key <span class=\"token operator\">===</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n          combineKey <span class=\"token operator\">===</span> <span class=\"token string\">\"commandOrCtrl\"</span> <span class=\"token operator\">&amp;&amp;</span>\n          <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>metaKey <span class=\"token operator\">||</span> e<span class=\"token punctuation\">.</span>ctrlKey<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">onKeyDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>combineKey <span class=\"token operator\">===</span> <span class=\"token string\">\"alt\"</span> <span class=\"token operator\">&amp;&amp;</span> e<span class=\"token punctuation\">.</span>altKey<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">onKeyDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>combineKey <span class=\"token operator\">===</span> <span class=\"token string\">\"shift\"</span> <span class=\"token operator\">&amp;&amp;</span> e<span class=\"token punctuation\">.</span>shiftKey<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">onKeyDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"keydown\"</span><span class=\"token punctuation\">,</span> handleKeyDown<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      documet<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\"keydown\"</span><span class=\"token punctuation\">,</span>\n        handleKeyDown\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>onKeyDown<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol>\n<li>문제는 이렇게 하면 다른 모든 조합키 및 input에서 text 입력이 동작이 안 된다.</li>\n<li>해결하려면 원하는 element에서만 동작하도록 하려면 props로 element 를 받아야 한다. 그리고 preventDefault() 의 위치를 이동해야 한다.</li>\n</ol>\n<p>아래는 수정한 코드이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">useOnMultiKeyDown</span><span class=\"token punctuation\">(</span>\n combineKey<span class=\"token operator\">:</span> <span class=\"token string\">'commandOrCtrl'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'alt'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'shift'</span><span class=\"token punctuation\">,</span>\n keyCode<span class=\"token operator\">:</span> KeyboardEvent<span class=\"token punctuation\">[</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n onKeyDown<span class=\"token operator\">:</span> VoidFunction<span class=\"token punctuation\">,</span>\n element<span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleKeyDown</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> KeyboardEvent<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>key <span class=\"token operator\">===</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n          combineKey <span class=\"token operator\">===</span> <span class=\"token string\">\"commandOrCtrl\"</span> <span class=\"token operator\">&amp;&amp;</span>\n          <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>metaKey <span class=\"token operator\">||</span> e<span class=\"token punctuation\">.</span>ctrlKey<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">onKeyDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>combineKey <span class=\"token operator\">===</span> <span class=\"token string\">\"alt\"</span> <span class=\"token operator\">&amp;&amp;</span> e<span class=\"token punctuation\">.</span>altKey<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">onKeyDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>combineKey <span class=\"token operator\">===</span> <span class=\"token string\">\"shift\"</span> <span class=\"token operator\">&amp;&amp;</span> e<span class=\"token punctuation\">.</span>shiftKey<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">onKeyDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>element <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      element<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"keydown\"</span><span class=\"token punctuation\">,</span> handleKeyDown<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        element<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"keydown\"</span><span class=\"token punctuation\">,</span> handleKeyDown<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>onKeyDown<span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h3>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/5203407/how-to-detect-if-multiple-keys-are-pressed-at-once-using-javascript\">https://stackoverflow.com/questions/5203407/how-to-detect-if-multiple-keys-are-pressed-at-once-using-javascript</a></li>\n</ul>","frontmatter":{"title":"Multi key event 인식하는 커스텀 훅 만들기","date":"September 04, 2022"}}},"pageContext":{"slug":"/React/Multi key event 인식하는 커스텀 훅 만들기/","previous":{"fields":{"slug":"/잡담/[잡담] 온라인 모각코/"},"frontmatter":{"title":"[잡담] 온라인 모각코"}},"next":null}},"staticQueryHashes":["2486386679","3128451518"]}