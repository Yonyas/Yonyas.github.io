{"componentChunkName":"component---src-templates-blog-post-js","path":"/React/JSX vs FC/","result":{"data":{"site":{"siteMetadata":{"title":"Yonyas 블로그","author":"Jiyon Lee","siteUrl":"https://yonyas.github.io","comment":{"disqusShortName":"","utterances":"Yonyas/blog-comments"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"5ae487e3-6196-5a1b-bd05-0ada21c5aec5","excerpt":"TypeScript는 기본적으로 리액트 컴포넌트를 JSX.Element로 타입추론을 한다. 컴포넌트 타입을 로 바꾸려면 따로 타입을 지정해주어야 한다. 현재는 FC로 지정해서 사용하고 있는데 굳이 를 계속 써야 하는지 JSX와 차이는 무엇인지 궁금해서 찾아보았다.\n 사용의 장단점을 알아보겠다. React.FC 의 장점 컴포넌트에 을 명시할 수 있다. displayName은 UI 라이브러리를 사용할 때 dev tool…","html":"<p>TypeScript는 기본적으로 리액트 컴포넌트를 JSX.Element로 타입추론을 한다. 컴포넌트 타입을 <code class=\"language-text\">React.FC</code>로 바꾸려면 따로 타입을 지정해주어야 한다. 현재는 FC로 지정해서 사용하고 있는데 굳이 <code class=\"language-text\">React.FC</code>를 계속 써야 하는지 JSX와 차이는 무엇인지 궁금해서 찾아보았다.\n<code class=\"language-text\">React.FC</code> 사용의 장단점을 알아보겠다.</p>\n<h2 id=\"reactfc-의-장점\" style=\"position:relative;\"><a href=\"#reactfc-%EC%9D%98-%EC%9E%A5%EC%A0%90\" aria-label=\"reactfc 의 장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React.FC 의 장점</h2>\n<ol>\n<li>컴포넌트에 <code class=\"language-text\">displayName</code>을 명시할 수 있다. displayName은 UI 라이브러리를 사용할 때 dev tool에서 컴포넌트명 확인을 할 수 있다.</li>\n<li>올바른 리턴타입을 강제한다. 만약 실수로 false를 리턴한다면 에러가 난다.</li>\n</ol>\n<h2 id=\"reactfc-의-단점\" style=\"position:relative;\"><a href=\"#reactfc-%EC%9D%98-%EB%8B%A8%EC%A0%90\" aria-label=\"reactfc 의 단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React.FC 의 단점</h2>\n<ol>\n<li>children을 내포하고 있다. 그렇기 때문에 children을 props로 받지 않는 컴포넌트에 children을 주어도 에러가 생기지 않는다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> NoChildren<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">FC</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>NoChildren component<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Container</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>NoChildren<span class=\"token operator\">></span> <span class=\"token constant\">HI</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>NoCHildren<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"2\">\n<li>코드 가독성을 해친다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> NoChildren<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token constant\">FC</span><span class=\"token operator\">&lt;</span>NoChildrenProps<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  item<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> NoChildrenProps<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>NoChildren component<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>추론하게 둔다면 아래와 같이 간단해진다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">NoChildren</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> item<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> NoChildrenProps<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>NoChildren component<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>    2-1. Copound components 의 가독성을 해친다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token operator\">&lt;</span>Select<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Select<span class=\"token punctuation\">.</span>Item<span class=\"token operator\">></span>Item <span class=\"token number\">1</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Select<span class=\"token punctuation\">.</span>Item<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Select<span class=\"token operator\">></span></code></pre></div>\n<p><code class=\"language-text\">React.FC</code> 로는 아래와 같이 사용해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> Select<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token constant\">FC</span><span class=\"token operator\">&lt;</span>SelectProps<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{</span> Item<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token constant\">FC</span><span class=\"token operator\">&lt;</span>ItemProps<span class=\"token operator\">></span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* ... */</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nSelect<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">Item</span> <span class=\"token operator\">=</span> props <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/*...*/</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">React.FC</code> 를 사용하지 않는다면 아래와 같이 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Select</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> SelectProps<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* ... */</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nSelect<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">Item</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> ItemProps<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/*...*/</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol start=\"3\">\n<li>defaultProps 문제<br>\n아래 코드의 ComponentProps에서 name이 optional parameter 이지만 defaultProps가 지정되어 있으므로 <code class=\"language-text\">name.toUpperCase()</code> 에서 undefined 타입에러가 나지 않아야 할 것 같다. 하지만 <code class=\"language-text\">React.FC</code> 컴포넌트에서는 에러가 난다. JSX에서는 타입에러 없이 잘 작동한다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">ComponentProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// optional</span>\n\n<span class=\"token keyword\">const</span> Component<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">FC</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> ComponentProps<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// ❌ error&lt;/div></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nComponent<span class=\"token punctuation\">.</span>defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'John'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Example</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>Component <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ol>\n<li><a href=\"https://github.com/facebook/create-react-app/pull/8177\">https://github.com/facebook/create-react-app/pull/8177</a></li>\n<li><a href=\"https://medium.com/raccoons-group/why-you-probably-shouldnt-use-react-fc-to-type-your-react-components-37ca1243dd13\">Why you probably shouldn’t use React.FC to type your React components | by Sam Hendrickx | Raccoons Group | Medium</a></li>\n</ol>","frontmatter":{"title":"JSX vs FC (React.FC 의 장단점)","date":"April 10, 2022"}}},"pageContext":{"slug":"/React/JSX vs FC/","previous":{"fields":{"slug":"/JavaScript/ES module에 대해/"},"frontmatter":{"title":"ES module에 대해"}},"next":{"fields":{"slug":"/TypeScript/Object Types/"},"frontmatter":{"title":"[TypeScript] Object Types"}}}},"staticQueryHashes":["2486386679","3128451518"]}