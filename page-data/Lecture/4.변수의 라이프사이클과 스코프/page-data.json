{"componentChunkName":"component---src-templates-blog-post-js","path":"/Lecture/4.변수의 라이프사이클과 스코프/","result":{"data":{"site":{"siteMetadata":{"title":"Yonyas 블로그","author":"Jiyon Lee","siteUrl":"https://yonyas.github.io","comment":{"disqusShortName":"","utterances":"Yonyas/blog-comments"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"52438027-e81a-5b42-934a-c5b6f285ea00","excerpt":"과제 아래 법칙들을 이용해서 stringify 만들기 (재귀, 꼬리재귀, 루프 세가지 방법으로) 변수의 스코프와 라이프사이클. 연산과 메모리의 관계 오류와 실패의 관계 - 오류는 중간요소의 내결합성 때문에 실패로 이어지지 않을 수 있다. 오류가 최대한 빨리 실패로 이어지게 짜라. 컨텍스트에러가 더 무서운 것 -> 신뢰성, 안정성(컨텍스트에러발생 올라감)은 trade off (js…","html":"<h1 id=\"과제\" style=\"position:relative;\"><a href=\"#%EA%B3%BC%EC%A0%9C\" aria-label=\"과제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>과제</h1>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ab\"c'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">_</span> <span class=\"token operator\">=></span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></code></pre></div>\n<p>아래 법칙들을 이용해서 stringify 만들기 (재귀, 꼬리재귀, 루프 세가지 방법으로)</p>\n<ol start=\"0\">\n<li>변수의 스코프와 라이프사이클. 연산과 메모리의 관계</li>\n<li>오류와 실패의 관계 - 오류는 중간요소의 내결합성 때문에 실패로 이어지지 않을 수 있다. 오류가 최대한 빨리 실패로 이어지게 짜라. <strong>컨텍스트에러</strong>가 더 무서운 것 -> 신뢰성, 안정성(컨텍스트에러발생 올라감)은 trade off (js는 컴파일타임에 잡을 수 없으니까 런타임에 에러 뿜도록)</li>\n<li>코드의 분리 - 수정되는 원인에 따라, 변화율(변화율 같은 애들끼리 모으기)</li>\n<li>js 인터페이스란 함수의 이름, 인자, 반환값 형식이 일치하는 경우</li>\n<li>인터페이스 일치시키면 컬렉션으로 묶을 수 있다 -> 일종의 일반화 -> 서로 다른 형태를 인터페이스를 일치시켜 일반화한다.</li>\n<li>데이터와 데이터를 이용한 알고리즘이 이원화되면 관리가 불가능 -> 데이터를 소유한 쪽에서 데이터를 사용하는 알고리즘을 제공한다.</li>\n<li>꼬리최적화 함수를 루프로 고칠때는 기계적으로 수정</li>\n<li>루프는 클로저에만 의존하는 함수를 반복시키고, 재귀함수는 인자에만 의존하는 함수를 반복시킨다.</li>\n<li>반복되는 코드를 제거하기 위해 집착하자.</li>\n</ol>\n<h2 id=\"강의링크\" style=\"position:relative;\"><a href=\"#%EA%B0%95%EC%9D%98%EB%A7%81%ED%81%AC\" aria-label=\"강의링크 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>강의링크</h2>\n<p><a href=\"https://youtu.be/rQOpmgo99BQ\">코드스피츠 Programming101 - 2강</a></p>","frontmatter":{"title":"4.미정","date":"July 24, 2021"}}},"pageContext":{"slug":"/Lecture/4.변수의 라이프사이클과 스코프/","previous":{"fields":{"slug":"/Lecture/3.변수의 라이프사이클과 스코프/"},"frontmatter":{"title":"3.변수의 라이프사이클과 스코프"}},"next":null}},"staticQueryHashes":["2486386679","3128451518"]}